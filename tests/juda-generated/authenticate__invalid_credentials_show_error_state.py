"""
Ensures that logging in with incorrect credentials does not authenticate the user and shows a clear, accessible error message without navigating away from the login page.

Generated by Juda AI Test Automation
"""

import os
import time
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

SEL = {
    "login.form": (By.CSS_SELECTOR, "[data-test='login-form']"),
    "login.username": (By.CSS_SELECTOR, "[data-test='login-username']"),
    "login.password": (By.CSS_SELECTOR, "[data-test='login-password']"),
    "login.submit": (By.CSS_SELECTOR, "[data-test='login-submit']"),
    "auth.error": (By.CSS_SELECTOR, "[data-test='auth-error']"),
}

DEFAULT_BASE_URL = os.getenv("BASE_URL", "http://localhost:3000")

@pytest.hookimpl(hookwrapper=True, tryfirst=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()
    setattr(item, "rep_" + rep.when, rep)

@pytest.fixture(scope="function")
def driver(request):
    options = webdriver.ChromeOptions()
    if os.getenv("HEADLESS", "true").lower() in ("1", "true", "yes"): 
        options.add_argument("--headless=new")
    options.add_argument("--window-size=1440,900")
    drv = webdriver.Chrome(options=options)
    yield drv
    try:
        failed = hasattr(request.node, 'rep_call') and request.node.rep_call.failed
    except Exception:
        failed = False
    if failed:
        ts = int(time.time() * 1000)
        path = os.path.join(os.getenv("ARTIFACTS_DIR", "."), f"{request.node.name}-{ts}.png")
        try:
            drv.save_screenshot(path)
        except Exception:
            pass
    drv.quit()

def safe_get(drv, url):
    drv.get(url)
    WebDriverWait(drv, 15).until(lambda d: d.execute_script('return document.readyState') == 'complete')

@pytest.mark.e2e
def test_login_invalid_credentials_shows_error(driver):
    base = DEFAULT_BASE_URL.rstrip('/')
    safe_get(driver, f"{base}/login")

    WebDriverWait(driver, 15).until(EC.visibility_of_element_located(SEL["login.form"]))

    # Intentionally wrong password
    driver.find_element(*SEL["login.username"]).clear()
    driver.find_element(*SEL["login.username"]).send_keys("nonexistent@user.tld")
    driver.find_element(*SEL["login.password"]).clear()
    driver.find_element(*SEL["login.password"]).send_keys("WrongPassword!!")
    driver.find_element(*SEL["login.submit"]).click()

    # Stay on login and show error
    try:
        WebDriverWait(driver, 10).until(EC.visibility_of_element_located(SEL["auth.error"]))
    except TimeoutException:
        raise AssertionError("Expected authentication error message is not visible")

    error_el = driver.find_element(*SEL["auth.error"])
    assert error_el.is_displayed(), "Error message should be displayed"
    # Optional content assertion if known string is used in the app
    # assert "invalid" in error_el.text.lower()

    # Ensure we did not navigate away from login
    assert EC.visibility_of_element_located(SEL["login.form"])(driver), "Should remain on the login page after invalid attempt"

