"""
Verifies that a user can log in with valid credentials and then log out successfully. Confirms post-login landing marker and that user is redirected back to the login page after logout.

Generated by Juda AI Test Automation
"""

import os
import time
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

DEFAULT_TIMEOUT = int(os.getenv('SELENIUM_TIMEOUT', '20'))

EMAIL = os.environ.get('TRIXJO_USER_EMAIL')
PASSWORD = os.environ.get('TRIXJO_USER_PASSWORD')
BASE_URL = os.getenv('TRIXJO_BASE_URL', 'http://localhost:3000')

LOGIN_PATH = os.getenv('TRIXJO_LOGIN_PATH', '/login')
DASHBOARD_PATH = os.getenv('TRIXJO_DASHBOARD_PATH', '/')

# Common selectors (adjust to your DOM)
SEL = {
    'login_email': ["[data-testid='login-email']", "input[name='email']", "#email"],
    'login_password': ["[data-testid='login-password']", "input[name='password']", "input[type='password']"],
    'login_submit': ["[data-testid='login-submit']", "button[type='submit']", "button[aria-label='Log in']"],
    'dashboard_marker': ["[data-testid='dashboard']", "[data-testid='app-root']", "header [data-testid='user-avatar']", "main"],
    'avatar_or_menu': ["[data-testid='user-avatar']", "button[aria-label='Account']", "[data-testid='open-user-menu']"],
    'logout': ["[data-testid='logout']", "a[href*='logout']", "button[aria-label='Log out']", "button*=Log out"],
}

@pytest.fixture
def driver():
    opts = Options()
    if os.getenv('HEADLESS', '1') == '1':
        opts.add_argument('--headless=new')
    opts.add_argument('--window-size=1280,900')
    d = webdriver.Chrome(options=opts)
    d.set_page_load_timeout(30)
    yield d
    d.quit()

def wait_css_any(driver, selectors, condition='visible', timeout=DEFAULT_TIMEOUT):
    wait = WebDriverWait(driver, timeout)
    last_err = None
    for css in selectors:
        try:
            locator = (By.CSS_SELECTOR, css)
            if condition == 'clickable':
                return wait.until(EC.element_to_be_clickable(locator))
            if condition == 'present':
                return wait.until(EC.presence_of_element_located(locator))
            return wait.until(EC.visibility_of_element_located(locator))
        except Exception as e:
            last_err = e
    raise last_err or TimeoutException('No selector matched: ' + ','.join(selectors))

@pytest.mark.skipif(not EMAIL or not PASSWORD, reason='Set TRIXJO_USER_EMAIL and TRIXJO_USER_PASSWORD env vars')
def test_login_logout_flow(driver):
    try:
        # Navigate to login
        driver.get(BASE_URL.rstrip('/') + LOGIN_PATH)
        # Fill credentials
        email_el = wait_css_any(driver, SEL['login_email'])
        pass_el = wait_css_any(driver, SEL['login_password'])
        email_el.clear(); email_el.send_keys(EMAIL)
        pass_el.clear(); pass_el.send_keys(PASSWORD)
        # Submit
        wait_css_any(driver, SEL['login_submit'], condition='clickable').click()
        # Assert we land on dashboard or app root
        WebDriverWait(driver, DEFAULT_TIMEOUT).until(
            EC.url_contains(DASHBOARD_PATH if DASHBOARD_PATH != '/' else BASE_URL.rstrip('/'))
        )
        dash = wait_css_any(driver, SEL['dashboard_marker'], condition='present')
        assert dash is not None, 'Dashboard marker not found after login'
        # Open user menu/avatar if needed and logout
        try:
            menu_btn = wait_css_any(driver, SEL['avatar_or_menu'], condition='clickable')
            menu_btn.click()
            time.sleep(0.3)
        except Exception:
            pass  # some UIs expose logout directly
        # Click logout if available
        logout_clicked = False
        for _ in range(2):
            try:
                wait_css_any(driver, SEL['logout'], condition='clickable').click()
                logout_clicked = True
                break
            except Exception:
                # If menu wasn't open on first try, attempt to open again
                try:
                    menu_btn = wait_css_any(driver, SEL['avatar_or_menu'], condition='clickable')
                    menu_btn.click()
                    time.sleep(0.2)
                except Exception:
                    pass
        if not logout_clicked:
            # Fallback to direct logout URL if app supports it
            driver.get(BASE_URL.rstrip('/') + '/logout')
        # Verify redirected back to login
        WebDriverWait(driver, DEFAULT_TIMEOUT).until(EC.url_contains(LOGIN_PATH))
        # Ensure login form is visible again
        assert wait_css_any(driver, SEL['login_email'], condition='visible')
    except Exception:
        driver.save_screenshot('login_logout_failure.png')
        raise

