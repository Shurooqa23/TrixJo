"""
Ensures route guarding: navigating directly to a protected route while unauthenticated redirects to the login page and shows the login form.

Generated by Juda AI Test Automation
"""

import os\nimport time\nimport pathlib\nimport pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# Assumes protected route /items requires authentication.\n\n@pytest.hookimpl(hookwrapper=True, tryfirst=True)\ndef pytest_runtest_makereport(item, call):\n    outcome = yield\n    rep = outcome.get_result()\n    setattr(item, f"rep_{rep.when}", rep)\n\n@pytest.fixture\ndef base_url():\n    return os.getenv("TRIXJO_BASE_URL", "http://localhost:3000")\n\n@pytest.fixture\ndef driver(request):\n    headless = os.getenv("HEADLESS", "1") == "1"\n    options = Options()\n    if headless:\n        options.add_argument("--headless=new")\n    options.add_argument("--window-size=1400,900")\n    options.add_argument("--disable-gpu")\n    options.add_argument("--no-sandbox")\n    drv = webdriver.Chrome(options=options)\n    drv.set_page_load_timeout(30)\n\n    screenshots_dir = pathlib.Path("./.artifacts/screenshots")\n    screenshots_dir.mkdir(parents=True, exist_ok=True)\n\n    yield drv\n\n    if hasattr(request.node, "rep_call") and request.node.rep_call.failed:\n        ts = time.strftime("%Y%m%d-%H%M%S")\n        name = request.node.name.replace("/", "_")\n        path = screenshots_dir / f"{name}-{ts}.png"\n        try:\n            drv.save_screenshot(str(path))\n        except Exception:\n            pass\n    drv.quit()\n\n# Helpers\n\ndef w(drv, timeout=15):\n    return WebDriverWait(drv, timeout)\n\ndef wait_visible(drv, locator, timeout=15):\n    return w(drv, timeout).until(EC.visibility_of_element_located(locator))\n\ndef wait_url_contains(drv, frag, timeout=15):\n    w(drv, timeout).until(EC.url_contains(frag))\n\ndef goto(drv, base_url, path):\n    drv.get(base_url.rstrip("/") + path)\n\ndef test_route_guard_redirects_to_login(driver, base_url):\n    # Start unauthenticated, go directly to a protected route\n    goto(driver, base_url, "/items")\n\n    # Expect redirect to /login and login form visible\n    wait_url_contains(driver, "/login")\n    wait_visible(driver, (By.CSS_SELECTOR, '[data-test="login-submit"]'))\n\n    # Ensure no protected content rendered\n    protected = driver.find_elements(By.CSS_SELECTOR, '[data-test="items-list"]')\n    assert len(protected) == 0\n
