"""
Verifies that accessing a protected route without a session redirects to the login page, and after successful login the user is redirected back to the originally requested route.

Generated by Juda AI Test Automation
"""

import os
import time
import uuid
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

SEL = {
    "login.form": (By.CSS_SELECTOR, "[data-test='login-form']"),
    "login.username": (By.CSS_SELECTOR, "[data-test='login-username']"),
    "login.password": (By.CSS_SELECTOR, "[data-test='login-password']"),
    "login.submit": (By.CSS_SELECTOR, "[data-test='login-submit']"),
    "projects.list": (By.CSS_SELECTOR, "[data-test='projects-list']"),
    "projects.pageTitle": (By.CSS_SELECTOR, "[data-test='projects-title']"),
}

DEFAULT_BASE_URL = os.getenv("BASE_URL", "http://localhost:3000")
DEFAULT_USERNAME = os.getenv("TEST_USERNAME", "admin@example.com")
DEFAULT_PASSWORD = os.getenv("TEST_PASSWORD", "Password123!")

@pytest.hookimpl(hookwrapper=True, tryfirst=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()
    setattr(item, "rep_" + rep.when, rep)

@pytest.fixture(scope="function")
def driver(request):
    options = webdriver.ChromeOptions()
    if os.getenv("HEADLESS", "true").lower() in ("1", "true", "yes"): 
        options.add_argument("--headless=new")
    options.add_argument("--window-size=1440,900")
    drv = webdriver.Chrome(options=options)
    yield drv
    try:
        failed = hasattr(request.node, 'rep_call') and request.node.rep_call.failed
    except Exception:
        failed = False
    if failed:
        ts = int(time.time() * 1000)
        path = os.path.join(os.getenv("ARTIFACTS_DIR", "."), f"{request.node.name}-{ts}.png")
        try:
            drv.save_screenshot(path)
        except Exception:
            pass
    drv.quit()

def safe_get(drv, url):
    drv.get(url)
    WebDriverWait(drv, 15).until(lambda d: d.execute_script('return document.readyState') == 'complete')

@pytest.mark.e2e
def test_protected_route_redirects_and_returns_after_login(driver):
    base = DEFAULT_BASE_URL.rstrip('/')
    protected = f"{base}/projects"  # Adjust to a known protected route

    # Step 1: Navigate to protected route without auth
    safe_get(driver, protected)

    # Expect redirect to login form
    WebDriverWait(driver, 15).until(EC.visibility_of_element_located(SEL["login.form"]))
    assert "/login" in driver.current_url, "Should be on login page when unauthenticated"

    # Step 2: Login
    driver.find_element(*SEL["login.username"]).clear()
    driver.find_element(*SEL["login.username"]).send_keys(DEFAULT_USERNAME)
    driver.find_element(*SEL["login.password"]).clear()
    driver.find_element(*SEL["login.password"]).send_keys(DEFAULT_PASSWORD)
    driver.find_element(*SEL["login.submit"]).click()

    # Step 3: After login, expect to land back on the protected route
    try:
        WebDriverWait(driver, 20).until(EC.url_contains("/projects"))
        WebDriverWait(driver, 20).until(EC.visibility_of_element_located(SEL["projects.list"]))
    except TimeoutException:
        raise AssertionError("Did not return to the originally requested protected route after login")

    # Assertions on the page content
    assert EC.visibility_of_element_located(SEL["projects.pageTitle"])(driver), "Projects title should be visible"
    assert EC.visibility_of_element_located(SEL["projects.list"])(driver), "Projects list should be visible"

