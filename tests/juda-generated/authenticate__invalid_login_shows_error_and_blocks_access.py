"""
Attempts login with invalid credentials and verifies an error message/toast is shown and the user stays on the login page without accessing the dashboard.

Generated by Juda AI Test Automation
"""

import os
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

DEFAULT_TIMEOUT = int(os.getenv('SELENIUM_TIMEOUT', '20'))
BASE_URL = os.getenv('TRIXJO_BASE_URL', 'http://localhost:3000')
LOGIN_PATH = os.getenv('TRIXJO_LOGIN_PATH', '/login')

SEL = {
    'login_email': ["[data-testid='login-email']", "input[name='email']", "#email"],
    'login_password': ["[data-testid='login-password']", "input[name='password']", "input[type='password']"],
    'login_submit': ["[data-testid='login-submit']", "button[type='submit']", "button[aria-label='Log in']"],
    'login_error': ["[data-testid='login-error']", "[role='alert']", ".error", ".alert-danger", "[data-testid='toast-error']"],
    'dashboard_marker': ["[data-testid='dashboard']", "header [data-testid='user-avatar']", "[data-testid='app-root']"],
}

@pytest.fixture
def driver():
    opts = Options()
    if os.getenv('HEADLESS', '1') == '1':
        opts.add_argument('--headless=new')
    opts.add_argument('--window-size=1280,900')
    d = webdriver.Chrome(options=opts)
    d.set_page_load_timeout(30)
    yield d
    d.quit()

def wait_css_any(driver, selectors, condition='visible', timeout=DEFAULT_TIMEOUT):
    wait = WebDriverWait(driver, timeout)
    last_err = None
    for css in selectors:
        try:
            locator = (By.CSS_SELECTOR, css)
            if condition == 'clickable':
                return wait.until(EC.element_to_be_clickable(locator))
            if condition == 'present':
                return wait.until(EC.presence_of_element_located(locator))
            return wait.until(EC.visibility_of_element_located(locator))
        except Exception as e:
            last_err = e
    raise last_err or TimeoutException('No selector matched: ' + ','.join(selectors))

def test_invalid_login_shows_error_and_blocks_access(driver):
    try:
        driver.get(BASE_URL.rstrip('/') + LOGIN_PATH)
        wait_css_any(driver, SEL['login_email']).send_keys('invalid@example.com')
        wait_css_any(driver, SEL['login_password']).send_keys('wrong-password')
        wait_css_any(driver, SEL['login_submit'], condition='clickable').click()
        # Expect an error indicator
        err = wait_css_any(driver, SEL['login_error'], condition='visible')
        assert err is not None, 'No validation or error message shown for invalid login'
        # Ensure we remain on login page (URL still contains /login)
        assert LOGIN_PATH in driver.current_url, 'Unexpected navigation away from login page on invalid login'
        # Ensure dashboard is not visible
        for css in SEL['dashboard_marker']:
            assert len(driver.find_elements(By.CSS_SELECTOR, css)) == 0, 'Dashboard marker present after invalid login'
    except Exception:
        driver.save_screenshot('invalid_login_failure.png')
        raise

