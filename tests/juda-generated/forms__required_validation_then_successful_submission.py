"""
Covers a typical create form. First asserts client/server-side validation prevents submission when required fields are empty. Then fills fields and submits, verifying success feedback and redirection or presence of the newly created entity.

Generated by Juda AI Test Automation
"""

import os
import time
import uuid
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

DEFAULT_TIMEOUT = int(os.getenv('SELENIUM_TIMEOUT', '20'))
BASE_URL = os.getenv('TRIXJO_BASE_URL', 'http://localhost:3000')
LOGIN_PATH = os.getenv('TRIXJO_LOGIN_PATH', '/login')
CREATE_PATH = os.getenv('TRIXJO_CREATE_PATH', '/items/new')
EMAIL = os.environ.get('TRIXJO_USER_EMAIL')
PASSWORD = os.environ.get('TRIXJO_USER_PASSWORD')

SEL = {
    'login_email': ["[data-testid='login-email']", "input[name='email']", "#email"],
    'login_password': ["[data-testid='login-password']", "input[name='password']", "input[type='password']"],
    'login_submit': ["[data-testid='login-submit']", "button[type='submit']", "button[aria-label='Log in']"],
    'form_name': ["[data-testid='item-name']", "input[name='name']", "#name"],
    'form_desc': ["[data-testid='item-description']", "textarea[name='description']", "#description"],
    'form_submit': ["[data-testid='save-item']", "button[type='submit']", "button*=Save"],
    'name_error': ["[data-testid='name-error']", ".invalid-feedback", "[role='alert']", ".error"],
    'toast_success': ["[data-testid='toast-success']", ".toast-success", "[role='status']"]
}

@pytest.fixture
def driver():
    opts = Options()
    if os.getenv('HEADLESS', '1') == '1':
        opts.add_argument('--headless=new')
    opts.add_argument('--window-size=1280,900')
    d = webdriver.Chrome(options=opts)
    d.set_page_load_timeout(30)
    yield d
    d.quit()

def wait_css_any(driver, selectors, condition='visible', timeout=DEFAULT_TIMEOUT):
    wait = WebDriverWait(driver, timeout)
    for css in selectors:
        try:
            locator = (By.CSS_SELECTOR, css)
            if condition == 'clickable':
                return wait.until(EC.element_to_be_clickable(locator))
            if condition == 'present':
                return wait.until(EC.presence_of_element_located(locator))
            return wait.until(EC.visibility_of_element_located(locator))
        except Exception:
            continue
    raise AssertionError('None of the selectors were found: ' + ','.join(selectors))

@pytest.mark.skipif(not EMAIL or not PASSWORD, reason='Set TRIXJO_USER_EMAIL and TRIXJO_USER_PASSWORD env vars')
def test_create_form_validation_then_submit(driver):
    # Login first
    driver.get(BASE_URL.rstrip('/') + LOGIN_PATH)
    wait_css_any(driver, SEL['login_email']).send_keys(EMAIL)
    wait_css_any(driver, SEL['login_password']).send_keys(PASSWORD)
    wait_css_any(driver, SEL['login_submit'], condition='clickable').click()
    # Go to create form
    driver.get(BASE_URL.rstrip('/') + CREATE_PATH)
    # Attempt submit without required name
    wait_css_any(driver, SEL['form_submit'], condition='clickable').click()
    # Verify a validation error appears
    assert wait_css_any(driver, SEL['name_error'], condition='visible')
    # Fill the form correctly
    unique_name = f"Auto Item {uuid.uuid4().hex[:6]}"
    name_el = wait_css_any(driver, SEL['form_name'])
    name_el.clear(); name_el.send_keys(unique_name)
    try:
        desc_el = wait_css_any(driver, SEL['form_desc'])
        desc_el.clear(); desc_el.send_keys('Created by automated test.')
    except AssertionError:
        pass  # description may be optional / not present
    # Submit
    wait_css_any(driver, SEL['form_submit'], condition='clickable').click()
    # Verify success toast or new page contains the new name
    success = False
    try:
        wait_css_any(driver, SEL['toast_success'], condition='visible', timeout=10)
        success = True
    except AssertionError:
        pass
    if not success:
        # Fallback: wait for redirect and presence of the new name somewhere on the page
        WebDriverWait(driver, DEFAULT_TIMEOUT).until(lambda d: unique_name.lower() in d.page_source.lower())
    assert True

