"""
Validates that a user with correct credentials can log in, reach the dashboard, and log out successfully. Asserts the presence of post-login UI and the return to the login screen on logout.

Generated by Juda AI Test Automation
"""

import os
import time
import uuid
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

# Selector mapping (adjust to match the app's data-test attributes)
SEL = {
    "login.form": (By.CSS_SELECTOR, "[data-test='login-form']"),
    "login.username": (By.CSS_SELECTOR, "[data-test='login-username']"),
    "login.password": (By.CSS_SELECTOR, "[data-test='login-password']"),
    "login.submit": (By.CSS_SELECTOR, "[data-test='login-submit']"),
    "nav.userMenu": (By.CSS_SELECTOR, "[data-test='nav-user-menu']"),
    "nav.logout": (By.CSS_SELECTOR, "[data-test='nav-logout']"),
    "dashboard.welcome": (By.CSS_SELECTOR, "[data-test='dashboard-welcome']"),
}

DEFAULT_BASE_URL = os.getenv("BASE_URL", "http://localhost:3000")
DEFAULT_USERNAME = os.getenv("TEST_USERNAME", "admin@example.com")
DEFAULT_PASSWORD = os.getenv("TEST_PASSWORD", "Password123!")

@pytest.hookimpl(hookwrapper=True, tryfirst=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()
    setattr(item, "rep_" + rep.when, rep)

@pytest.fixture(scope="function")
def driver(request):
    options = webdriver.ChromeOptions()
    if os.getenv("HEADLESS", "true").lower() in ("1", "true", "yes"): 
        options.add_argument("--headless=new")
    options.add_argument("--window-size=1440,900")
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    drv = webdriver.Chrome(options=options)
    yield drv
    # Screenshot on failure
    try:
        failed = hasattr(request.node, 'rep_call') and request.node.rep_call.failed
    except Exception:
        failed = False
    if failed:
        ts = int(time.time() * 1000)
        fname = f"{request.node.name}-{ts}.png"
        out_dir = os.getenv("ARTIFACTS_DIR", ".")
        path = os.path.join(out_dir, fname)
        try:
            drv.save_screenshot(path)
        except Exception:
            pass
    drv.quit()

def wait_visible(drv, locator, timeout=15):
    return WebDriverWait(drv, timeout).until(EC.visibility_of_element_located(locator))

def wait_clickable(drv, locator, timeout=15):
    return WebDriverWait(drv, timeout).until(EC.element_to_be_clickable(locator))

def click(drv, locator, timeout=15):
    el = wait_clickable(drv, locator, timeout)
    el.click()
    return el

def type_text(drv, locator, text, clear=True, timeout=15):
    el = wait_visible(drv, locator, timeout)
    if clear:
        el.clear()
    el.send_keys(text)
    return el

def safe_get(drv, url):
    drv.get(url)
    WebDriverWait(drv, 15).until(lambda d: d.execute_script('return document.readyState') == 'complete')

@pytest.mark.e2e
@pytest.mark.smoke
def test_login_then_logout(driver):
    base = DEFAULT_BASE_URL.rstrip('/')
    # Go to login page
    safe_get(driver, f"{base}/login")
    # Assert login form renders
    login_form = wait_visible(driver, SEL["login.form"])  # raises if missing
    assert login_form.is_displayed(), "Login form should be visible"

    # Perform login
    type_text(driver, SEL["login.username"], DEFAULT_USERNAME)
    type_text(driver, SEL["login.password"], DEFAULT_PASSWORD)
    click(driver, SEL["login.submit"])

    # Wait for dashboard
    try:
        WebDriverWait(driver, 20).until(EC.any_of(
            EC.visibility_of_element_located(SEL["dashboard.welcome"]),
            EC.url_contains("/dashboard")
        ))
    except TimeoutException:
        # Capture additional info
        raise AssertionError("Expected to land on dashboard after login, but didn't within timeout")

    # Basic post-login assertions
    assert EC.visibility_of_element_located(SEL["dashboard.welcome"])(driver), "Dashboard welcome message not visible"
    assert EC.visibility_of_element_located(SEL["nav.userMenu"])(driver), "User menu should be visible after login"

    # Logout flow
    click(driver, SEL["nav.userMenu"])
    click(driver, SEL["nav.logout"]) 

    # Verify redirected back to login form
    try:
        WebDriverWait(driver, 15).until(EC.visibility_of_element_located(SEL["login.form"]))
    except TimeoutException:
        raise AssertionError("Expected to see login form after logout")

    # Final assertion: user menu should not be visible anymore
    user_menu_present = False
    try:
        user_menu_present = driver.find_element(*SEL["nav.userMenu"]).is_displayed()
    except NoSuchElementException:
        user_menu_present = False
    assert not user_menu_present, "User menu still present after logout"

