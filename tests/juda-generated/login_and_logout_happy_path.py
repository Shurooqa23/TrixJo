"""
Verifies that a user can log in with valid credentials and log out successfully. Confirms post-login landing, presence of user menu, and redirection back to the login screen after logout.

Generated by Juda AI Test Automation
"""

import os\nimport time\nimport pathlib\nimport pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# Assumptions (replace selectors to match the app):\n# - Login page at /login, dashboard at /dashboard\n# - data-test selectors exist, e.g., login-email, login-password, login-submit,\n#   dashboard-title, user-menu, logout-button.\n\n# Pytest hook to capture test outcome and attach to item\n@pytest.hookimpl(hookwrapper=True, tryfirst=True)\ndef pytest_runtest_makereport(item, call):\n    outcome = yield\n    rep = outcome.get_result()\n    setattr(item, f"rep_{rep.when}", rep)\n\n@pytest.fixture\ndef base_url():\n    return os.getenv("TRIXJO_BASE_URL", "http://localhost:3000")\n\n@pytest.fixture\ndef creds():\n    user = os.getenv("TRIXJO_USERNAME")\n    pwd = os.getenv("TRIXJO_PASSWORD")\n    return {"username": user, "password": pwd}\n\n@pytest.fixture\ndef driver(request):\n    headless = os.getenv("HEADLESS", "1") == "1"\n    options = Options()\n    if headless:\n        options.add_argument("--headless=new")\n    options.add_argument("--window-size=1400,900")\n    options.add_argument("--disable-gpu")\n    options.add_argument("--no-sandbox")\n    drv = webdriver.Chrome(options=options)\n    drv.set_page_load_timeout(30)\n\n    # Screenshot on failure\n    screenshots_dir = pathlib.Path("./.artifacts/screenshots")\n    screenshots_dir.mkdir(parents=True, exist_ok=True)\n\n    yield drv\n\n    if hasattr(request.node, "rep_call") and request.node.rep_call.failed:\n        ts = time.strftime("%Y%m%d-%H%M%S")\n        name = request.node.name.replace("/", "_")\n        path = screenshots_dir / f"{name}-{ts}.png"\n        try:\n            drv.save_screenshot(str(path))\n        except Exception:\n            pass\n    drv.quit()\n\n# ---------- Helper utilities ----------\n\ndef w(drv, timeout=15):\n    return WebDriverWait(drv, timeout)\n\ndef wait_visible(drv, locator, timeout=15):\n    return w(drv, timeout).until(EC.visibility_of_element_located(locator))\n\ndef wait_clickable(drv, locator, timeout=15):\n    return w(drv, timeout).until(EC.element_to_be_clickable(locator))\n\ndef safe_click(drv, locator):\n    el = wait_clickable(drv, locator)\n    el.click()\n    return el\n\ndef type_text(drv, locator, text, clear=True):\n    el = wait_visible(drv, locator)\n    if clear:\n        el.clear()\n    el.send_keys(text)\n    return el\n\ndef wait_url_contains(drv, frag, timeout=15):\n    w(drv, timeout).until(EC.url_contains(frag))\n\ndef maybe_wait_spinner(drv, timeout=5):\n    # Optional spinner wait if present\n    try:\n        w(drv, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR, '[data-test="loading-spinner"]')))\n        w(drv, timeout).until(EC.invisibility_of_element_located((By.CSS_SELECTOR, '[data-test="loading-spinner"]')))\n    except Exception:\n        pass\n\ndef goto(drv, base_url, path):\n    drv.get(base_url.rstrip("/") + path)\n    maybe_wait_spinner(drv)\n\ndef login(drv, base_url, username, password):\n    goto(drv, base_url, "/login")\n    type_text(drv, (By.CSS_SELECTOR, '[data-test="login-email"]'), username)\n    type_text(drv, (By.CSS_SELECTOR, '[data-test="login-password"]'), password)\n    safe_click(drv, (By.CSS_SELECTOR, '[data-test="login-submit"]'))\n    wait_url_contains(drv, "/dashboard")\n    wait_visible(drv, (By.CSS_SELECTOR, '[data-test="dashboard-title"]'))\n\n@pytest.mark.skipif(not os.getenv("TRIXJO_USERNAME") or not os.getenv("TRIXJO_PASSWORD"), reason="Valid TRIXJO_USERNAME and TRIXJO_PASSWORD required")\ndef test_login_logout_happy_path(driver, base_url, creds):\n    # Login\n    login(driver, base_url, creds["username"], creds["password"])\n\n    # Assert logged in landing elements\n    dash_title = wait_visible(driver, (By.CSS_SELECTOR, '[data-test="dashboard-title"]'))\n    assert dash_title.text.strip() != ""\n\n    # Open user menu and logout\n    safe_click(driver, (By.CSS_SELECTOR, '[data-test="user-menu"]'))\n    safe_click(driver, (By.CSS_SELECTOR, '[data-test="logout-button"]'))\n\n    # Verify redirected to login\n    wait_url_contains(driver, "/login")\n    wait_visible(driver, (By.CSS_SELECTOR, '[data-test="login-submit"]'))\n
