"""
Ensures that logging in with invalid credentials shows an error message, does not navigate to the dashboard, and keeps the user on the login page.

Generated by Juda AI Test Automation
"""

import os\nimport time\nimport pathlib\nimport pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# Assumptions: /login page and data-test selectors: login-email, login-password, login-submit, auth-error\n\n@pytest.hookimpl(hookwrapper=True, tryfirst=True)\ndef pytest_runtest_makereport(item, call):\n    outcome = yield\n    rep = outcome.get_result()\n    setattr(item, f"rep_{rep.when}", rep)\n\n@pytest.fixture\ndef base_url():\n    return os.getenv("TRIXJO_BASE_URL", "http://localhost:3000")\n\n@pytest.fixture\ndef driver(request):\n    headless = os.getenv("HEADLESS", "1") == "1"\n    options = Options()\n    if headless:\n        options.add_argument("--headless=new")\n    options.add_argument("--window-size=1400,900")\n    options.add_argument("--disable-gpu")\n    options.add_argument("--no-sandbox")\n    drv = webdriver.Chrome(options=options)\n    drv.set_page_load_timeout(30)\n\n    screenshots_dir = pathlib.Path("./.artifacts/screenshots")\n    screenshots_dir.mkdir(parents=True, exist_ok=True)\n\n    yield drv\n\n    if hasattr(request.node, "rep_call") and request.node.rep_call.failed:\n        ts = time.strftime("%Y%m%d-%H%M%S")\n        name = request.node.name.replace("/", "_")\n        path = screenshots_dir / f"{name}-{ts}.png"\n        try:\n            drv.save_screenshot(str(path))\n        except Exception:\n            pass\n    drv.quit()\n\n# Helpers\n\ndef w(drv, timeout=15):\n    return WebDriverWait(drv, timeout)\n\ndef wait_visible(drv, locator, timeout=15):\n    return w(drv, timeout).until(EC.visibility_of_element_located(locator))\n\ndef wait_clickable(drv, locator, timeout=15):\n    return w(drv, timeout).until(EC.element_to_be_clickable(locator))\n\ndef safe_click(drv, locator):\n    el = wait_clickable(drv, locator)\n    el.click()\n    return el\n\ndef type_text(drv, locator, text, clear=True):\n    el = wait_visible(drv, locator)\n    if clear:\n        el.clear()\n    el.send_keys(text)\n    return el\n\ndef wait_url_contains(drv, frag, timeout=10):\n    w(drv, timeout).until(EC.url_contains(frag))\n\ndef goto(drv, base_url, path):\n    drv.get(base_url.rstrip("/") + path)\n    # optional spinner handling\n    try:\n        w(drv, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR, '[data-test="loading-spinner"]')))\n        w(drv, 10).until(EC.invisibility_of_element_located((By.CSS_SELECTOR, '[data-test="loading-spinner"]')))\n    except Exception:\n        pass\n\ndef test_invalid_login_shows_error(driver, base_url):\n    goto(driver, base_url, "/login")\n\n    type_text(driver, (By.CSS_SELECTOR, '[data-test="login-email"]'), "invalid.user@example.com")\n    type_text(driver, (By.CSS_SELECTOR, '[data-test="login-password"]'), "wrongpassword123")\n    safe_click(driver, (By.CSS_SELECTOR, '[data-test="login-submit"]'))\n\n    # Remains on login and shows error\n    wait_visible(driver, (By.CSS_SELECTOR, '[data-test="auth-error"]'))\n    err_text = driver.find_element(By.CSS_SELECTOR, '[data-test="auth-error"]').text.lower()\n    assert "invalid" in err_text or "incorrect" in err_text or "error" in err_text\n    assert "/login" in driver.current_url\n    # Ensure dashboard not visible\n    dashboard = driver.find_elements(By.CSS_SELECTOR, '[data-test="dashboard-title"]')\n    assert len(dashboard) == 0\n
