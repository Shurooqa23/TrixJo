"""
Navigates directly to a protected route; verifies redirect to login. After login, ensures the app redirects back to the originally requested route.

Generated by Juda AI Test Automation
"""

import os
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

DEFAULT_TIMEOUT = int(os.getenv('SELENIUM_TIMEOUT', '20'))
BASE_URL = os.getenv('TRIXJO_BASE_URL', 'http://localhost:3000')
PROTECTED_PATH = os.getenv('TRIXJO_PROTECTED_PATH', '/app')
LOGIN_PATH = os.getenv('TRIXJO_LOGIN_PATH', '/login')

EMAIL = os.environ.get('TRIXJO_USER_EMAIL')
PASSWORD = os.environ.get('TRIXJO_USER_PASSWORD')

SEL = {
    'login_email': ["[data-testid='login-email']", "input[name='email']", "#email"],
    'login_password': ["[data-testid='login-password']", "input[name='password']", "input[type='password']"],
    'login_submit': ["[data-testid='login-submit']", "button[type='submit']", "button[aria-label='Log in']"],
    'protected_marker': ["[data-testid='protected-root']", "[data-testid='dashboard']", "main"],
}

@pytest.fixture
def driver():
    opts = Options()
    if os.getenv('HEADLESS', '1') == '1':
        opts.add_argument('--headless=new')
    opts.add_argument('--window-size=1280,900')
    d = webdriver.Chrome(options=opts)
    d.set_page_load_timeout(30)
    yield d
    d.quit()

def wait_css_any(driver, selectors, condition='visible', timeout=DEFAULT_TIMEOUT):
    wait = WebDriverWait(driver, timeout)
    for css in selectors:
        try:
            locator = (By.CSS_SELECTOR, css)
            if condition == 'clickable':
                return wait.until(EC.element_to_be_clickable(locator))
            if condition == 'present':
                return wait.until(EC.presence_of_element_located(locator))
            return wait.until(EC.visibility_of_element_located(locator))
        except Exception:
            continue
    raise AssertionError('None of the selectors were found: ' + ','.join(selectors))

@pytest.mark.skipif(not EMAIL or not PASSWORD, reason='Set TRIXJO_USER_EMAIL and TRIXJO_USER_PASSWORD env vars')
def test_redirect_to_original_after_login(driver):
    # Go to protected route as anonymous; expect redirect to login
    target = BASE_URL.rstrip('/') + PROTECTED_PATH
    driver.get(target)
    WebDriverWait(driver, DEFAULT_TIMEOUT).until(EC.url_contains(LOGIN_PATH))
    # Login
    wait_css_any(driver, SEL['login_email']).send_keys(EMAIL)
    wait_css_any(driver, SEL['login_password']).send_keys(PASSWORD)
    wait_css_any(driver, SEL['login_submit'], condition='clickable').click()
    # Verify redirected back to protected route
    WebDriverWait(driver, DEFAULT_TIMEOUT).until(lambda d: PROTECTED_PATH in d.current_url)
    # Verify protected marker is visible
    assert wait_css_any(driver, SEL['protected_marker'], condition='present')

