"""
Validates full CRUD lifecycle for a representative entity: create a new item, verify it appears in the list, update its name, verify the update, then delete it and assert removal from the list.

Generated by Juda AI Test Automation
"""

import os
import time
import uuid
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException

SEL = {
    "login.form": (By.CSS_SELECTOR, "[data-test='login-form']"),
    "login.username": (By.CSS_SELECTOR, "[data-test='login-username']"),
    "login.password": (By.CSS_SELECTOR, "[data-test='login-password']"),
    "login.submit": (By.CSS_SELECTOR, "[data-test='login-submit']"),
    "nav.items": (By.CSS_SELECTOR, "[data-test='nav-items']"),
    "items.list.table": (By.CSS_SELECTOR, "[data-test='items-table']"),
    "items.new": (By.CSS_SELECTOR, "[data-test='items-new']"),
    "item.form": (By.CSS_SELECTOR, "[data-test='item-form']"),
    "item.name": (By.CSS_SELECTOR, "[data-test='item-name']"),
    "item.description": (By.CSS_SELECTOR, "[data-test='item-description']"),
    "item.save": (By.CSS_SELECTOR, "[data-test='item-save']"),
    "item.edit": (By.CSS_SELECTOR, "[data-test='item-edit']"),
    "item.delete": (By.CSS_SELECTOR, "[data-test='item-delete']"),
    "confirm.modal": (By.CSS_SELECTOR, "[data-test='confirm-modal']"),
    "confirm.ok": (By.CSS_SELECTOR, "[data-test='confirm-ok']"),
    "toast.success": (By.CSS_SELECTOR, "[data-test='toast-success']"),
}

DEFAULT_BASE_URL = os.getenv("BASE_URL", "http://localhost:3000")
DEFAULT_USERNAME = os.getenv("TEST_USERNAME", "admin@example.com")
DEFAULT_PASSWORD = os.getenv("TEST_PASSWORD", "Password123!")

@pytest.hookimpl(hookwrapper=True, tryfirst=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()
    setattr(item, "rep_" + rep.when, rep)

@pytest.fixture(scope="function")
def driver(request):
    options = webdriver.ChromeOptions()
    if os.getenv("HEADLESS", "true").lower() in ("1", "true", "yes"): 
        options.add_argument("--headless=new")
    options.add_argument("--window-size=1440,900")
    drv = webdriver.Chrome(options=options)
    yield drv
    try:
        failed = hasattr(request.node, 'rep_call') and request.node.rep_call.failed
    except Exception:
        failed = False
    if failed:
        ts = int(time.time() * 1000)
        path = os.path.join(os.getenv("ARTIFACTS_DIR", "."), f"{request.node.name}-{ts}.png")
        try:
            drv.save_screenshot(path)
        except Exception:
            pass
    drv.quit()

def wait_visible(drv, locator, timeout=15):
    return WebDriverWait(drv, timeout).until(EC.visibility_of_element_located(locator))

def safe_get(drv, url):
    drv.get(url)
    WebDriverWait(drv, 15).until(lambda d: d.execute_script('return document.readyState') == 'complete')

def login(drv):
    safe_get(drv, f"{DEFAULT_BASE_URL.rstrip('/')}/login")
    wait_visible(drv, SEL["login.form"]) 
    drv.find_element(*SEL["login.username"]).send_keys(DEFAULT_USERNAME)
    drv.find_element(*SEL["login.password"]).send_keys(DEFAULT_PASSWORD)
    drv.find_element(*SEL["login.submit"]).click()
    WebDriverWait(drv, 20).until(EC.visibility_of_element_located(SEL["nav.items"]))

@pytest.mark.e2e
def test_crud_item_lifecycle(driver):
    login(driver)

    # Navigate to list and create new item
    driver.find_element(*SEL["nav.items"]).click()
    wait_visible(driver, SEL["items.list.table"]) 
    driver.find_element(*SEL["items.new"]).click()
    wait_visible(driver, SEL["item.form"]) 

    base_name = f"Item-{int(time.time())}-{uuid.uuid4().hex[:4]}"
    drv = driver
    drv.find_element(*SEL["item.name"]).send_keys(base_name)
    drv.find_element(*SEL["item.description"]).send_keys("CRUD test item")
    drv.find_element(*SEL["item.save"]).click()

    # Verify creation success and list contains item
    WebDriverWait(drv, 20).until(EC.visibility_of_element_located(SEL["toast.success"]))
    # Return to list if auto-redirect didn't happen
    if not EC.visibility_of_element_located(SEL["items.list.table"])(drv):
        driver.find_element(*SEL["nav.items"]).click()
        wait_visible(driver, SEL["items.list.table"]) 

    # Find the created row by text
    row_xpath = f"//table[contains(@data-test,'items-table')]//tr[.//td[contains(normalize-space(), '{base_name}')]]"
    WebDriverWait(drv, 15).until(EC.visibility_of_element_located((By.XPATH, row_xpath)))

    # Update: open row's edit via button within the row
    edit_btn_xpath = row_xpath + "//button[@data-test='item-edit']"
    WebDriverWait(drv, 10).until(EC.element_to_be_clickable((By.XPATH, edit_btn_xpath))).click()

    wait_visible(drv, SEL["item.form"]) 
    new_name = base_name + "-updated"
    name_el = drv.find_element(*SEL["item.name"]) 
    name_el.clear()
    name_el.send_keys(new_name)
    drv.find_element(*SEL["item.save"]).click()
    WebDriverWait(drv, 20).until(EC.visibility_of_element_located(SEL["toast.success"]))

    # Verify updated name visible in list
    driver.find_element(*SEL["nav.items"]).click()
    wait_visible(driver, SEL["items.list.table"]) 
    updated_row_xpath = f"//table[contains(@data-test,'items-table')]//tr[.//td[contains(normalize-space(), '{new_name}')]]"
    WebDriverWait(drv, 15).until(EC.visibility_of_element_located((By.XPATH, updated_row_xpath)))

    # Delete the item using the delete button in the row
    delete_btn_xpath = updated_row_xpath + "//button[@data-test='item-delete']"
    WebDriverWait(drv, 10).until(EC.element_to_be_clickable((By.XPATH, delete_btn_xpath))).click()
    # Confirm modal
    WebDriverWait(drv, 10).until(EC.visibility_of_element_located(SEL["confirm.modal"]))
    drv.find_element(*SEL["confirm.ok"]).click()
    WebDriverWait(drv, 20).until(EC.visibility_of_element_located(SEL["toast.success"]))

    # Assert the row no longer exists
    time.sleep(0.5)  # allow table to refresh
    rows = drv.find_elements(By.XPATH, updated_row_xpath)
    assert len(rows) == 0, "Deleted item row should be removed from the list"

