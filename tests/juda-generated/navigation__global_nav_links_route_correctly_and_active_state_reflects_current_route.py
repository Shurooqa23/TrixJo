"""
Validates top-level navigation links lead to the expected routes and that the active nav item updates accordingly. Ensures no JS errors block navigation by checking route URL and a page marker.

Generated by Juda AI Test Automation
"""

import os
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

DEFAULT_TIMEOUT = int(os.getenv('SELENIUM_TIMEOUT', '20'))
BASE_URL = os.getenv('TRIXJO_BASE_URL', 'http://localhost:3000')
LOGIN_PATH = os.getenv('TRIXJO_LOGIN_PATH', '/login')
EMAIL = os.environ.get('TRIXJO_USER_EMAIL')
PASSWORD = os.environ.get('TRIXJO_USER_PASSWORD')

# Configure expected nav labels and their target paths for your app
NAV_ITEMS = [
    { 'label': os.getenv('TRIXJO_NAV_1_LABEL', 'Dashboard'), 'path': os.getenv('TRIXJO_NAV_1_PATH', '/') },
    { 'label': os.getenv('TRIXJO_NAV_2_LABEL', 'Items'), 'path': os.getenv('TRIXJO_NAV_2_PATH', '/items') }
]

SEL = {
    'login_email': ["[data-testid='login-email']", "input[name='email']", "#email"],
    'login_password': ["[data-testid='login-password']", "input[name='password']"],
    'login_submit': ["[data-testid='login-submit']", "button[type='submit']"],
    'nav_container': ["[data-testid='global-nav']", "nav[role='navigation']", "header nav"],
    'active_nav': ["[data-testid='nav-active']", "nav .active", "[aria-current='page']"],
    'page_marker': ["[data-testid='page-root']", "main", "[data-testid='dashboard']"]
}

@pytest.fixture
def driver():
    opts = Options()
    if os.getenv('HEADLESS', '1') == '1':
        opts.add_argument('--headless=new')
    opts.add_argument('--window-size=1280,900')
    d = webdriver.Chrome(options=opts)
    d.set_page_load_timeout(30)
    yield d
    d.quit()

def wait_css_any(driver, selectors, condition='visible', timeout=DEFAULT_TIMEOUT):
    wait = WebDriverWait(driver, timeout)
    for css in selectors:
        try:
            locator = (By.CSS_SELECTOR, css)
            if condition == 'clickable':
                return wait.until(EC.element_to_be_clickable(locator))
            if condition == 'present':
                return wait.until(EC.presence_of_element_located(locator))
            return wait.until(EC.visibility_of_element_located(locator))
        except Exception:
            continue
    raise AssertionError('None of the selectors were found: ' + ','.join(selectors))

@pytest.mark.skipif(not EMAIL or not PASSWORD, reason='Set TRIXJO_USER_EMAIL and TRIXJO_USER_PASSWORD env vars')
def test_global_navigation_routes_and_active_state(driver):
    # Login
    driver.get(BASE_URL.rstrip('/') + LOGIN_PATH)
    wait_css_any(driver, SEL['login_email']).send_keys(EMAIL)
    wait_css_any(driver, SEL['login_password']).send_keys(PASSWORD)
    wait_css_any(driver, SEL['login_submit'], condition='clickable').click()
    # Ensure nav is present
    wait_css_any(driver, SEL['nav_container'], condition='present')
    # Visit each nav item using its label
    for item in NAV_ITEMS:
        label = item['label']
        path = item['path']
        # Click link by text
        link = WebDriverWait(driver, DEFAULT_TIMEOUT).until(
            EC.element_to_be_clickable((By.XPATH, f"//nav//*[self::a or self::button][normalize-space()='{label}']"))
        )
        link.click()
        # URL should contain target path
        WebDriverWait(driver, DEFAULT_TIMEOUT).until(lambda d: path in d.current_url)
        # An active nav indicator should be present
        active = wait_css_any(driver, SEL['active_nav'], condition='present')
        assert active is not None, f'Active nav indicator missing after navigating to {label}'
        # A page marker should be present
        assert wait_css_any(driver, SEL['page_marker'], condition='present')

