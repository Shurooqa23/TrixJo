"""
Ensures UI interactions like opening a modal, toggling a setting, saving, and closing behave as expected. Verifies modal visibility transitions and the toggle state is applied.

Generated by Juda AI Test Automation
"""

import os
import time
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

DEFAULT_TIMEOUT = int(os.getenv('SELENIUM_TIMEOUT', '20'))
BASE_URL = os.getenv('TRIXJO_BASE_URL', 'http://localhost:3000')
LOGIN_PATH = os.getenv('TRIXJO_LOGIN_PATH', '/login')
EMAIL = os.environ.get('TRIXJO_USER_EMAIL')
PASSWORD = os.environ.get('TRIXJO_USER_PASSWORD')

SEL = {
    'login_email': ["[data-testid='login-email']", "input[name='email']", "#email"],
    'login_password': ["[data-testid='login-password']", "input[name='password']"],
    'login_submit': ["[data-testid='login-submit']", "button[type='submit']"],
    'open_settings': ["[data-testid='open-settings']", "button[aria-label='Settings']", "button*=Settings"],
    'modal': ["[data-testid='settings-modal']", "[role='dialog']", ".modal[open]"],
    'toggle_pref': ["[data-testid='pref-toggle']", "input[type='checkbox'][name='darkMode']", "input[type='checkbox']"],
    'save_settings': ["[data-testid='save-settings']", "button[type='submit']", "button*=Save"],
    'close_modal': ["[data-testid='close-modal']", "button[aria-label='Close']", "button*=Close"],
}

@pytest.fixture
def driver():
    opts = Options()
    if os.getenv('HEADLESS', '1') == '1':
        opts.add_argument('--headless=new')
    opts.add_argument('--window-size=1280,900')
    d = webdriver.Chrome(options=opts)
    d.set_page_load_timeout(30)
    yield d
    d.quit()

def wait_css_any(driver, selectors, condition='visible', timeout=DEFAULT_TIMEOUT):
    wait = WebDriverWait(driver, timeout)
    for css in selectors:
        try:
            locator = (By.CSS_SELECTOR, css)
            if condition == 'clickable':
                return wait.until(EC.element_to_be_clickable(locator))
            if condition == 'present':
                return wait.until(EC.presence_of_element_located(locator))
            return wait.until(EC.visibility_of_element_located(locator))
        except Exception:
            continue
    raise AssertionError('None of the selectors were found: ' + ','.join(selectors))

@pytest.mark.skipif(not EMAIL or not PASSWORD, reason='Set TRIXJO_USER_EMAIL and TRIXJO_USER_PASSWORD env vars')
def test_settings_modal_interactions(driver):
    # Login
    driver.get(BASE_URL.rstrip('/') + LOGIN_PATH)
    wait_css_any(driver, SEL['login_email']).send_keys(EMAIL)
    wait_css_any(driver, SEL['login_password']).send_keys(PASSWORD)
    wait_css_any(driver, SEL['login_submit'], condition='clickable').click()
    # Open settings modal
    wait_css_any(driver, SEL['open_settings'], condition='clickable').click()
    modal = wait_css_any(driver, SEL['modal'], condition='visible')
    assert modal is not None, 'Settings modal did not open'
    # Toggle a preference
    toggle = wait_css_any(driver, SEL['toggle_pref'], condition='present')
    was_checked = toggle.is_selected()
    toggle.click()
    # Save settings
    wait_css_any(driver, SEL['save_settings'], condition='clickable').click()
    # Modal should close
    WebDriverWait(driver, DEFAULT_TIMEOUT).until(EC.invisibility_of_element(modal))
    # Reopen and verify persisted toggle state (best-effort; adjust if your app stores differently)
    wait_css_any(driver, SEL['open_settings'], condition='clickable').click()
    modal = wait_css_any(driver, SEL['modal'], condition='visible')
    toggle = wait_css_any(driver, SEL['toggle_pref'], condition='present')
    assert toggle.is_selected() != was_checked, 'Preference toggle state did not persist after save'
    # Close modal
    wait_css_any(driver, SEL['close_modal'], condition='clickable').click()
    WebDriverWait(driver, DEFAULT_TIMEOUT).until(EC.invisibility_of_element(modal))

