"""
Covers form validation for required fields on the create-item page and a successful creation flow. Verifies success toast and that the new item appears in the list.

Generated by Juda AI Test Automation
"""

import os\nimport time\nimport pathlib\nimport pytest\nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# Assumes create form at /items/new. Selectors: item-form, submit-button,\n# error-required, field: name [data-test="field-name"], description [data-test="field-description"],\n# status select [data-test="field-status"], toast-success, items-list, and table row contains item name.\n\n@pytest.hookimpl(hookwrapper=True, tryfirst=True)\ndef pytest_runtest_makereport(item, call):\n    outcome = yield\n    rep = outcome.get_result()\n    setattr(item, f"rep_{rep.when}", rep)\n\n@pytest.fixture\ndef base_url():\n    return os.getenv("TRIXJO_BASE_URL", "http://localhost:3000")\n\n@pytest.fixture\ndef creds():\n    return {"username": os.getenv("TRIXJO_USERNAME"), "password": os.getenv("TRIXJO_PASSWORD")}\n\n@pytest.fixture\ndef driver(request):\n    headless = os.getenv("HEADLESS", "1") == "1"\n    options = Options()\n    if headless:\n        options.add_argument("--headless=new")\n    options.add_argument("--window-size=1400,900")\n    options.add_argument("--disable-gpu")\n    options.add_argument("--no-sandbox")\n    drv = webdriver.Chrome(options=options)\n    drv.set_page_load_timeout(30)\n\n    screenshots_dir = pathlib.Path("./.artifacts/screenshots")\n    screenshots_dir.mkdir(parents=True, exist_ok=True)\n\n    yield drv\n\n    if hasattr(request.node, "rep_call") and request.node.rep_call.failed:\n        ts = time.strftime("%Y%m%d-%H%M%S")\n        name = request.node.name.replace("/", "_")\n        path = screenshots_dir / f"{name}-{ts}.png"\n        try:\n            drv.save_screenshot(str(path))\n        except Exception:\n            pass\n    drv.quit()\n\n# Helpers\n\ndef w(drv, timeout=15):\n    return WebDriverWait(drv, timeout)\n\ndef wait_visible(drv, locator, timeout=15):\n    return w(drv, timeout).until(EC.visibility_of_element_located(locator))\n\ndef wait_clickable(drv, locator, timeout=15):\n    return w(drv, timeout).until(EC.element_to_be_clickable(locator))\n\ndef safe_click(drv, locator):\n    el = wait_clickable(drv, locator)\n    el.click()\n    return el\n\ndef type_text(drv, locator, text, clear=True):\n    el = wait_visible(drv, locator)\n    if clear:\n        el.clear()\n    el.send_keys(text)\n    return el\n\ndef wait_url_contains(drv, frag, timeout=15):\n    w(drv, timeout).until(EC.url_contains(frag))\n\ndef maybe_wait_spinner(drv, timeout=5):\n    try:\n        w(drv, 1).until(EC.presence_of_element_located((By.CSS_SELECTOR, '[data-test="loading-spinner"]')))\n        w(drv, timeout).until(EC.invisibility_of_element_located((By.CSS_SELECTOR, '[data-test="loading-spinner"]')))\n    except Exception:\n        pass\n\ndef goto(drv, base_url, path):\n    drv.get(base_url.rstrip("/") + path)\n    maybe_wait_spinner(drv)\n\ndef login(drv, base_url, username, password):\n    goto(drv, base_url, "/login")\n    type_text(drv, (By.CSS_SELECTOR, '[data-test="login-email"]'), username)\n    type_text(drv, (By.CSS_SELECTOR, '[data-test="login-password"]'), password)\n    safe_click(drv, (By.CSS_SELECTOR, '[data-test="login-submit"]'))\n    wait_url_contains(drv, "/dashboard")\n    wait_visible(drv, (By.CSS_SELECTOR, '[data-test="dashboard-title"]'))\n\n@pytest.mark.skipif(not os.getenv("TRIXJO_USERNAME") or not os.getenv("TRIXJO_PASSWORD"), reason="Valid TRIXJO_USERNAME and TRIXJO_PASSWORD required")\ndef test_create_item_validation_and_success(driver, base_url, creds):\n    login(driver, base_url, creds["username"], creds["password"])\n\n    # Go to create form\n    goto(driver, base_url, "/items/new")\n    wait_visible(driver, (By.CSS_SELECTOR, '[data-test="item-form"]'))\n\n    # Submit empty to trigger required validations\n    safe_click(driver, (By.CSS_SELECTOR, '[data-test="submit-button"]'))\n    # Expect at least one required error\n    errs = WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, '[data-test="error-required"]')))\n    assert len(errs) >= 1\n\n    # Fill valid data\n    unique_name = f"AutoItem-{int(time.time())}"\n    type_text(driver, (By.CSS_SELECTOR, '[data-test="field-name"]'), unique_name)\n    type_text(driver, (By.CSS_SELECTOR, '[data-test="field-description"]'), "Created by automated test")\n\n    # Optional: choose status if available\n    try:\n        safe_click(driver, (By.CSS_SELECTOR, '[data-test="field-status"]'))\n        # choose first/Active option\n        opt = WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.CSS_SELECTOR, '[data-test="option-active"], [data-test="option-0"]')))\n        opt.click()\n    except Exception:\n        pass\n\n    safe_click(driver, (By.CSS_SELECTOR, '[data-test="submit-button"]'))\n\n    # Verify success feedback and list contains the item\n    WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.CSS_SELECTOR, '[data-test="toast-success"]')))\n    wait_url_contains(driver, "/items")\n    wait_visible(driver, (By.CSS_SELECTOR, '[data-test="items-list"]'))\n\n    # Find row by text\n    rows = driver.find_elements(By.XPATH, f"//tr[.//*[contains(normalize-space(text()), '{'{'}}unique_name{'|}'}')]")\n    # Fallback: search any element containing the name\n    if not rows:\n        rows = driver.find_elements(By.XPATH, f"//*[contains(normalize-space(text()), '{'{'}}unique_name{'|}'}')]")\n    assert any(unique_name in r.text for r in rows)\n
