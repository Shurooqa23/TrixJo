"""
Navigates to a non-existent route to verify the 404 error page is shown and that the user can recover via a 'Go Home' link/button back to the main page.

Generated by Juda AI Test Automation
"""

import os
import pytest
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

DEFAULT_TIMEOUT = int(os.getenv('SELENIUM_TIMEOUT', '20'))
BASE_URL = os.getenv('TRIXJO_BASE_URL', 'http://localhost:3000')

SEL = {
    'error_404': ["[data-testid='error-404']", "[data-testid='not-found']", "h1*=404", "h1*=Not Found"],
    'go_home': ["[data-testid='go-home']", "a[href='/']", "a*=Home", "button*=Home"],
    'dashboard_marker': ["[data-testid='dashboard']", "[data-testid='app-root']", "main"]
}

@pytest.fixture
def driver():
    opts = Options()
    if os.getenv('HEADLESS', '1') == '1':
        opts.add_argument('--headless=new')
    opts.add_argument('--window-size=1280,900')
    d = webdriver.Chrome(options=opts)
    d.set_page_load_timeout(30)
    yield d
    d.quit()

def wait_css_any(driver, selectors, condition='visible', timeout=DEFAULT_TIMEOUT):
    wait = WebDriverWait(driver, timeout)
    for css in selectors:
        try:
            locator = (By.CSS_SELECTOR, css)
            if condition == 'clickable':
                return wait.until(EC.element_to_be_clickable(locator))
            if condition == 'present':
                return wait.until(EC.presence_of_element_located(locator))
            return wait.until(EC.visibility_of_element_located(locator))
        except Exception:
            continue
    raise AssertionError('None of the selectors were found: ' + ','.join(selectors))

def test_404_page_and_recovery(driver):
    driver.get(BASE_URL.rstrip('/') + '/___does-not-exist___')
    # Verify 404 indicator
    try:
        wait_css_any(driver, SEL['error_404'], condition='visible')
    except AssertionError:
        # Fallback: look for generic 'Page not found'
        WebDriverWait(driver, DEFAULT_TIMEOUT).until(lambda d: 'not found' in d.page_source.lower() or '404' in d.page_source)
    # Recover using Go Home
    try:
        wait_css_any(driver, SEL['go_home'], condition='clickable').click()
    except AssertionError:
        # Fallback: navigate to root
        driver.get(BASE_URL)
    # Verify back on a valid page
    wait_css_any(driver, SEL['dashboard_marker'], condition='present')

