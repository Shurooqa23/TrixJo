"""
Covers client-side validation for required fields, ensures inline error messages appear, then fills valid data and submits the form. Asserts success toast and redirect to the new record's detail page.

Generated by Juda AI Test Automation
"""

import os
import time
import uuid
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

SEL = {
    "login.form": (By.CSS_SELECTOR, "[data-test='login-form']"),
    "login.username": (By.CSS_SELECTOR, "[data-test='login-username']"),
    "login.password": (By.CSS_SELECTOR, "[data-test='login-password']"),
    "login.submit": (By.CSS_SELECTOR, "[data-test='login-submit']"),
    "nav.newItem": (By.CSS_SELECTOR, "[data-test='nav-items-new']"),
    "item.form": (By.CSS_SELECTOR, "[data-test='item-form']"),
    "item.name": (By.CSS_SELECTOR, "[data-test='item-name']"),
    "item.description": (By.CSS_SELECTOR, "[data-test='item-description']"),
    "item.submit": (By.CSS_SELECTOR, "[data-test='item-save']"),
    "item.validationError": (By.CSS_SELECTOR, "[data-test='form-error']"),
    "toast.success": (By.CSS_SELECTOR, "[data-test='toast-success']"),
    "item.detail.title": (By.CSS_SELECTOR, "[data-test='item-detail-title']"),
}

DEFAULT_BASE_URL = os.getenv("BASE_URL", "http://localhost:3000")
DEFAULT_USERNAME = os.getenv("TEST_USERNAME", "admin@example.com")
DEFAULT_PASSWORD = os.getenv("TEST_PASSWORD", "Password123!")

@pytest.hookimpl(hookwrapper=True, tryfirst=True)
def pytest_runtest_makereport(item, call):
    outcome = yield
    rep = outcome.get_result()
    setattr(item, "rep_" + rep.when, rep)

@pytest.fixture(scope="function")
def driver(request):
    options = webdriver.ChromeOptions()
    if os.getenv("HEADLESS", "true").lower() in ("1", "true", "yes"): 
        options.add_argument("--headless=new")
    options.add_argument("--window-size=1440,900")
    drv = webdriver.Chrome(options=options)
    yield drv
    try:
        failed = hasattr(request.node, 'rep_call') and request.node.rep_call.failed
    except Exception:
        failed = False
    if failed:
        ts = int(time.time() * 1000)
        path = os.path.join(os.getenv("ARTIFACTS_DIR", "."), f"{request.node.name}-{ts}.png")
        try:
            drv.save_screenshot(path)
        except Exception:
            pass
    drv.quit()

def wait_visible(drv, locator, timeout=15):
    return WebDriverWait(drv, timeout).until(EC.visibility_of_element_located(locator))

def safe_get(drv, url):
    drv.get(url)
    WebDriverWait(drv, 15).until(lambda d: d.execute_script('return document.readyState') == 'complete')

def login(drv):
    safe_get(drv, f"{DEFAULT_BASE_URL.rstrip('/')}/login")
    wait_visible(drv, SEL["login.form"]) 
    drv.find_element(*SEL["login.username"]).send_keys(DEFAULT_USERNAME)
    drv.find_element(*SEL["login.password"]).send_keys(DEFAULT_PASSWORD)
    drv.find_element(*SEL["login.submit"]).click()
    # Wait for any authenticated page; navigation link should be present
    WebDriverWait(drv, 20).until(EC.visibility_of_element_located(SEL["nav.newItem"]))

@pytest.mark.e2e
def test_form_validation_and_submission(driver):
    login(driver)

    # Navigate to create form
    driver.find_element(*SEL["nav.newItem"]).click()
    wait_visible(driver, SEL["item.form"]) 

    # Attempt to submit empty form to trigger validation
    driver.find_element(*SEL["item.submit"]).click()
    # Expect validation errors
    WebDriverWait(driver, 10).until(EC.visibility_of_element_located(SEL["item.validationError"]))

    # Provide valid values
    unique = f"Item-{int(time.time())}-{uuid.uuid4().hex[:6]}"
    driver.find_element(*SEL["item.name"]).clear()
    driver.find_element(*SEL["item.name"]).send_keys(unique)
    driver.find_element(*SEL["item.description"]).clear()
    driver.find_element(*SEL["item.description"]).send_keys("Automated test item description")

    # Submit
    driver.find_element(*SEL["item.submit"]).click()

    # Assert success toast and redirected to detail page
    WebDriverWait(driver, 20).until(EC.visibility_of_element_located(SEL["toast.success"]))
    # Detail title contains our item name
    title_el = WebDriverWait(driver, 20).until(EC.visibility_of_element_located(SEL["item.detail.title"]))
    assert unique in title_el.text, f"Detail title should include created name {unique}"

